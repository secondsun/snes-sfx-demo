; SuperFX
; Summers Pittman <secondsun@gmail.com>
; 16-bit 0.16-fixed point reciprocal
; reciprocal

.include "../../common/stack.i"
.include "../../common/function.i"
.include "../../common/structs.i"
.include "../../common/var.i"
.include "libSFX.i"

.macro init_rnc
	;decompress(bytesIn, *bytesOut, breakAfterBytes)
	;bytesIn is the romlocation of the compressed data
	;bytesOut is the ramlocation of the decompressed data
	;breakAfterBytes is the number of bytes to decompress before returning

.endmacro


.segment "GSURAM"
;.res 1 ; hack to byte align
INPUT:
.res 2
OUTPUT:
.res 2
.segment "GSUCODE"
GSU_Code:

;Setup stack
init_stack
init_rnc

;This label represents the memory address that begins test setup
; The lua script will execute setup here
test_setup:


;This label represents the memory address that begins test execution
test_call:
	gsu_stack_push r12
	gsu_stack_push r13
	iwt r0, #(.hiword( badapple))
	romb
	iwt r0, #badapple

	call parseHeader
	;iwt r0, #(.hiword( badapple))
	;iwt r1, #OUTPUT
	;iwt r2, #$156
	;call decompress
	;LET MEMORY SETTLE
 	nop
	nop
	nop
	nop
	nop
	nop
	nop
;This label represents the memory address that ends test execution.
;The test will loop back to test_call after reaching this label.  
; The lua script will check values here and prepare for the next loop
test_stop_parse:    
	nop
	nop

	iwt r1, #(.hiword( badapple))
	iwt r0, #badapple
	iwt r2, #0
	iwt r3, #$7b
	call initialize_buffer
	loop1 = r12
	loop2 = r13
	for 95
		gsu_stack_push loop1
		gsu_stack_push loop2
		nop
		test_prepare_buffer_read:    ;in lua script write input to #INPUT
		nop
		nop
		nop
		nop
		lm r0, (INPUT)
		nop
		call read_buffer
		sm (OUTPUT),r3
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		test_validate_buffer_read:    
		nop
		gsu_stack_pop loop2
		gsu_stack_pop loop1

	endfor


	gsu_stack_pop r13
	gsu_stack_pop r12
	nop
	stop
	nop


;Code goes in code segment
.include "../../gsu_maths/gsu_sqrt.i"
.include "../../gsu_maths/gsu_vector.i"
.include "../../gsu_maths/gsu_recip.i"
.include "../../gsu_maths/gsu_camera.i"
.include "../../rnc/gsu_decompress.i"
