; SuperFX
; Summers Pittman <secondsun@gmail.com>
; 16-bit 0.16-fixed point reciprocol
; reciprocol

.include "libSFX.i"

;The GSU stack is 16 bit values
.struct gsu_stack
  entries  .res $200 ; 512 Bytes of stack
.endstruct

.define stackPointer r10

.segment "GSURAM"
gsu_stack_ram:
  .res .sizeof(gsu_stack)

.segment "GSUCODE"

; Pushes the value stored in R to the stack
; R can not be 0 or 3, assumes r10 is stack pointer

.macro gsu_stack_push R
	.if .not(.blank ({R}))
		from	R
	.endif
	stw	(stackPointer)
	inc	stackPointer
	inc	stackPointer
.endmacro

; Pops the value stored in R to the stack
; R can not be 0 3 or 4
; clobbers r0, r3

.macro gsu_stack_pop R
	dec	stackPointer
	dec	stackPointer
	.if .not( .blank({R}))
		to	R
	.endif
	ldw	(stackPointer)
.endmacro

GSU_Code:


.PROC stack_demo
stack_demo:
	cache

	;initialize stackPointer to stack ram;
	iwt stackPointer, #gsu_stack_ram
	

	iwt r2, #$4
	gsu_stack_push r2

	iwt r2, #$5
	gsu_stack_push(r2)

	iwt r2, #$6
	gsu_stack_push(r2)

	iwt r2, #$7
	gsu_stack_push (r2)

	iwt r2, #$8
	gsu_stack_push (r2)

	iwt r2, #$9
	gsu_stack_push (r2)

	iwt r2, #$A
	gsu_stack_push (r2)

	stop
	nop
	stop
	nop
.endproc