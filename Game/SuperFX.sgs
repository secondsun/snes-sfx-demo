.include "libSFX.i"
.include "edgeEntry.i"

;This draws tree.bin
; Tree.bin is 0x1f columns 
; Tree.bin is 4bpp data (two pixels per cell)
; Tree.bin is 0x3f rows

.segment "GSUCODE"
;lines = 0xA0
GSU_Code:
.export GSU_Code

initializeEdgeTable:
  ;set all counters to 0 in
  iwt r0, #edgeTable
  ibt r1, #.sizeof(edgerow)
  ibt r2, #0 
  cache
  iwt r12, #161
  iwt r13, #:+
  :
  from r2
  stb (r0)  
  loop
add r1

  iwt r1, #edgeTable
  ibt r0, #0
  stb (r1)

createEdgeTable:
  ibt r0, #3 ; data bank 3
  romb 

  ibt r5, #0 ; sprite index counter

  
  
  ;for 0 -> spritespace::count
  	iwt r0,# (spritespace + spritelist::count) ; address of number of sprites
  	to r3
  	ldb (r0) ;get number of sprites to r3
cache
    addEdgeEntry:
	; umult = r5 * r6 => [R0]
	; r5 is sprite index.
	; r6 will have size of sprite
	; spritespace + r0 => r14 which is the start of the sprite list to draw
	iwt r6, #.sizeof(sprite)
	from r6
	umult r5
	iwt r1, #(spritespace + 2)
	add r1; skip pad byte and r0 = address of address of textur
	to r14
	ldw (r0) ; r14 has address of texture and loads first byte
	
    
	; optimize we need to interleave instructions so the rom buffer can fill
	; calculate and update the count of the line index of edge entries
	;   count := (edgeTable + yLoc * sizeof(edgeentry) )
	;   yLoc = r0+3
	ibt r1, #$2
	to r1
	add r1
	to r9
	ldb (r1) ; r9 now has xLoc

	ibt r1, #$3
	to r1
	add r1
	to r6
	ldb (r1) ; r6 now has yLoc
	move r4, r6 ; r4 has yLoc
	inc r1 ; r1 + 1 = scale_rAddress
	to r13
	ldw (r1); r13 has scale_r
	inc r1 ; 
	inc r1 ; r1 + 2 = scaleAddress
	to r2
	ldw (r1); r2 has scale
	;load texture address to r0 interleaving load
	move r8, r0
	getbl
	inc r14

	ibt r7, #.sizeof(edgerow)
	with r6
	umult r7 ; r6 = yLoc* sizeof(edgerow)
	iwt r1, #edgeTable
	from r6
	to r7
	add r1; r7 = address of count
	to r6
	ldb (r7)
	to r8
	ldw(r8)
    with r8
	add #2

	getbh
;how many rows?
; r0[h] * r6
move r10, r6
move r6, r2
move r2, r10
move r10, r4
;calculate height of sprite
to r11
hib
with r11
lmult
from r4
to r11
hib	
move r4, r10


	;end interleave
    ; r0 = [h][w/2]
	; r2 = indexOfEntryOnRow (maxes out at r3, #of Sprites)
	; r6 = scale ; will be needed in #adjustEdgeEntries
	; r3 = #ofSprites
	; r4 = yLoc
	; r5 = spriteIndex
	; r7 = count address
	; r8 = spriteAddress
	; r9 = xLoc
	; r11 = rendered height
	; r13 = scale_r
	; r12 = lineBeingDrawn
	; r10 = scratch
	;============================
	;
	;
	;r8 = spriteAddress => {W/2 (bh), h(bl), table, 4bpp[]}
	;
	; r8+2 = xLoc
	; r8+3 = yLoc
	; r8+4/5 = scale
	;
    ; we need to write an edgeEntry from yLoc -> yLoc + (h*scale).
	;   each entry is ++count _pad_ entries[]{texture, xLoc, w*2*scale, scale}
	;write to count_address + 2 +  count*sizeof(edgeentry) the following {r8, r9, r0[low]*2*r6, r6}
ibt r12, #0; start with first line
addEdgeRow:
    ibt r10, #.sizeof(edgeentry) ; r10 is a scratch register
    move r1, r0 ; r1 = [h][w/2]
	move r0, r2 ; 
	from r10
	umult r2
	add #2
	add r7 ; r0 is now the address to write the row

	;begin calculate row of texture to read from on this line
	from r1
	to r10
	lob ; r10 = with/2 aka #of bytes
	with r12
	swap ; r12 = low byte of r12 is int part of offset multiplier
	with r10
	mult r12; r10 = scaled texture offset

	move r10,r6
	move r6, r13
	move r13, r10 ; swap r13 and r6

	; todo get the skip to scale correctly.
	; r12 has the line we're on (scaled value)
	; need to multiply it by something, #4 is wrong
	from r12
	to r10
	mult #4
	with r10
	add r8; next header entry


	from r10 ; base address
	stw (r0) ; texture start address. Will become start address of pixel data in adjustEdgeEntries
		
	move r10, r13
	move r13, r6
	move r6, r10 ; swap r13 and r6


	with r12	
	swap ; r12 = restore r12 to normal order

	add #2
	from r9
	stb (r0) ; xloc

	add #1
	;we calculate length byte in adjustEdgeEntries

	add #1
	from r13
	stw (r0) ; scale_r
	inc r2
	from r2
	stb (r7) ; count++
    move r0, r1
	; fetch next row and count
	iwt r10, #.sizeof(edgerow)
	with r7
	add r10
	to r2
	ldb (r7)
	with r12
	add r13
	dec r11
	bne addEdgeRow
	nop
	; this writes one edge row entry 

	; for 0 -> sprite height * scale
  	;   addEdgeEntry (sprite, startX, scale)
  	; end

	inc r5
	from r3
	sub r5
	branch:
	beq adjustEdgeEntries
	nop
	iwt r15, #addEdgeEntry
	nop

; Right now the edge entry is [textureStartAddress][xPos][undefined][scale_r]
; we need to make it [pixelDataStartAddress][xPos + padding*scale][length*scale][scale_r]
; r6 coming in is assumed to be scale
; for each edgeEntry
; lookup textureStartAddress + 2 + intval[yPos * scale_r]*4
; this is the rowEntry
; yPos = #160 - r12
; pixelDataStartAddress = rowEntry + word@(rowEntry)
; padding = byte@(rowEntry+1)
; length = byte@(rowEntry+2)
; write
; 
; r6 = scale
; all other registers are fair game
; r3 = scratch


adjustEdgeEntries:
	; 160 rows in edgeTable
	iwt r12, #160 
    iwt r0, #edgeTable ; r0 holds the memory we are readin
	iwt r11, #edgeTable   ; r11 holds the start of the current row
    ibt r7, #0; yPos
	cache	
	adjustEdgeEntriesBody:
	    
		to r1
		ldb(r0) ; r1 = count
		with r1 ; reset flags
		add #0
		
		bne :+
			nop
			iwt r15, #nextRow2 ; count == 0, skip to the next row
			nop
	    :
		adjustNextEdgeEntryBody:
		add #2
        to r2
		ldw (r0) ; r2 = texturestartAddress
		move r14, r2 ; start load for texture
		add #2 ; r0 ;points to xPos
		to r3
		ldb (r0) ; r3 = xPos
 
		to r5
		getb
		with r2
		add #1 ; 
		move r14, r2 ; start load for texture high byte
		move r8, r2 
		with r8
		add #1 ; r8 points to pad


		
		
 		add #2 ; r0 points to scale_r
		to r4
		ldb (r0) ; r4 = scale_r

		with r5
		getbh ; r5 has skip Bytes
		with r5 
		; r2 + r5  = pixelBytes
		with r2
		add r5
		sub #4
		from r2
		stw(r0)

		add #2 ; r0 points to xLoc
		to r9 
		ldb (r0) ; r9 has xLoc


		move r14, r8; load pad
		with r8
		add #1 ; r8 points to length
		to r5
		getb ; r5 has pad
		move r14, r8; load length
		with r5
		swap
		with r5
		fmult 
		with r5
		add r9 ; r5 = scale pad + xLoc
		from r5
		stb(r0) ; save scaledAdjustedXLoc

		add #1 ; r0 points to length
		to r5
		getb ; r5 has length
		with r5
		swap
		with r5 ; scale length
		fmult 
		from r5
		stb(r0) ; save scaledLength
		
		add #1 ; setup r0 to next entry, if any

		with r1
		sub #1
		beq nextRow2
		nop
		iwt r15, #adjustNextEdgeEntryBody
		nop

		nextRow2:
			ibt r3, #.sizeof(edgerow)
			with r11
			add r3
			move r0, r11
	iwt r13, #adjustEdgeEntriesBody
	loop
	inc r7

next:
  ;end 
  
  
  iwt r12, #160 
  iwt r13, #predrawEdgeTable
  ibt r2, #0
  ibt r0, #$3 ; transparency off, high nibble has color
  cmode 
  ibt r0, #0 ; set color to black
  color
  
  cache
  ;black out all spaces that don't have sprites
iwt r0, #edgeTable
iwt r11, #edgeTable  
predrawEdgeTable:
  
  ibt r1, #0 ; x = 0;
  to r3
  ldb (r0) ; read count
  
  with r3
  add #0 ; set flags
  bne drawBlackSetup ; if count != 0 then draw the edge lines, else draw transparent
  nop
	move r4, r0 ; backup memory location

	ibt r0, #$20 ; 128 pixel 
	drawFour: 
	  plot
	  plot
	  plot
	  plot
	  dec r0
      bne drawFour
	  nop
	move r0, r4;restore edge table loc
	ibt r3, #.sizeof(edgerow)
	with r11
	add r3
	move r0, r11

	loop ; loop back to predrawEdgeTable
	inc r2
	bra finish1
	nop
  drawBlackSetup:	
  	;add #1 ; point r0 to start of first sprite
  drawBlack:
    add #4  ; r0 points to start value of current edge entry

	to r8
	ldb (r0) ; r8 has start
	add #1 ; r0 points to length
	to r7
	ldb (r0) ; r7 has length
	
	;is the start before the current plot point?
    from r8
	cmp r1
	beq nextSprite
	nop
	bmi nextSprite
	nop

    padStartOdd: ; clear out the one
    with r8 
	asr
	bcc padStartEven
	nop
	plot
	
	padStartEven: ; clear out the one
    with r8 
	asr
	bcc padStart
    nop
	plot
	plot

	padStart:
	  dec r8
	  bmi nextSprite
	  nop
	  plot
	  plot
	  plot
	  plot
	  bra padStart
	  nop

    nextSprite:
      with r1 
	  add r7 ; plot x=  plot x + length
	  add #1 ; we add 4 before we load, this lines that add up so we point to the right number of things
	  ;If more sprites, loop, otherwise, draw end
	  dec r3
	  bne drawBlack
	  nop
	
	;is the start before the current plot point?
	iwt r8, #128  
    with r8
	sub r1
	beq nextLine1
	nop
	bmi nextLine1
	nop

    padEndOdd: ; clear out the one
    with r8 
	asr
	bcc padEndEven
	nop
	plot
	
	padEndEven: ; clear out the one
    with r8 
	asr
	bcc padEnd
    nop
	plot
	plot

	padEnd:
	  dec r8
	  bmi nextLine1
	  nop
	  plot
	  plot
	  plot
	  plot
	  bra padEnd
	  nop

  nextLine1:
  ibt r3, #.sizeof(edgerow)
	with r11
	add r3
	move r0, r11
  loop
  inc r2
  nop

finish1:

  iwt r0, #edgeTable
  iwt r12, #160 
  iwt r13, #drawEdgeTable
  ibt r2, #0
  cache
drawEdgeTable:
  ibt r1, #0 ; x = 0;
  to r3
  ldb (r0) ; read count
  with r3
  add #0 ; set flags
  bne drawLine ; if count != 0 then draw the edge lines, else draw transparent
	nop
	ibt r3, #.sizeof(edgerow)
	add r3
	loop ; loop back to drawEdgeTable
	inc r2
	bra finish
	nop
  ; above if there are no sprites, draw a black line
  ; below draw the black preamble, then sprites (and fill gaps with black), then end black
  
  drawLine: 
  	add #2 ; r0 points to first edge entry
drawLine2: 
    ; r3 = number of edgeEntries on row
	; r0 = first entry of row on edgetable
	to r5
	ldw (r0); r5 has address of textur
	add #2 ; r0 points to start
	;
	to r8
	ldb (r0) ; r8 has start
	add #1 ; r0 points to length
	to r7
	ldb (r0) ; r7 has length
	with r7
	add #0
	bne :+
	nop
	add #3
	iwt r15, #next3
	
	:
	with r7
	asr
	add #1 ; r0 points to scale
	to r6
    ldw (r0) ; r6 has scale_r
	add #2 ; r0 points to next entry if any

    ;if r8 > r1
	; r1 = r8
	; else if r1 > r8
	;   if r1 < r8+r7
	;      r7 = r1-r8
    ; else 
	;   next3

    from r8 ; if r8 > r1
	cmp r1
	bge setX ; r1 = r8
	nop

	from r1 ; else if r1 > r8
	cmp r8
	beq drawSpriteLine
	nop

	adjustX: ;r1 < r8+r7?
  		to r4 ; r4 = r8+r7
		from r7
		add r8
		cmp r1
		bge next4 ; trampoline to next sprite
		nop
		to r7
		from r1
		sub r8 ; r7 = r1 - r8
        
		bra drawSpriteLine
		nop
		
		next4: 
		  iwt r15, #next3
		  nop
 	bra drawSpriteLine
	nop


    setX: 
	  move r1, r8
      

	; r11 = maxX
	; r1 = plotX
	; r2 = plotY
	; r3 = number of edgeEntries on row
	; r4 = scratch
	; r5 = texture address
    ; r6 = scale_r
	; r7 = length
	; r8 = startX, available to scratch
	; r9 = scratch
	; r10+ scratch 
	drawSpriteLine:
		iwt r11, #128
		move r14, r5 ; begin prefetch
		iwt r4, #0 ; r4 will be 8.8 with integer part added to r5 as offset
	drawSpriteLine1:
	  
	  with r4
	  add r6
	  to r9
	  from r4
	  hib
	  getc ; prefetch should be complete
	  from r5
	  to r14
	  add r9 ; load next byte
      drawPixel:
	    plot
		plot
	  from r1
	  cmp r11
	  bge next3
	  dec r7
	  beq next3
	  nop 
	  bpl drawSpriteLine1
	  nop 
next3:
	  
	;move r0, r13 
	dec r3
	bne drawLine2
    nop
	

	; set r0 to next entry, update y pos, loop
  	ibt r10, #.sizeof(edgerow)
	inc r2
  	from r2
	umult r10
  	iwt r3, #edgeTable
	iwt r13, #drawEdgeTable  
	loop
	add r3 ; r0 = next entry in table

  	nop

finish:

	shutdown:
	rpix
	rpix
	stop
	nop
	nop
	nop

tree:
.export tree
  incbin Tree, "Data/tree.bin"

pillar:
.export pillar
  incbin Pillar, "Data/pillar.bin"

banner1:
.export  banner1
  incbin Banner1, "Data/st_banner.bin"
  
banner2:
.export  banner2
  incbin Banner2, "Data/art_banner.bin"
.segment "GSURAM"
spritespace:
  .res .sizeof(spritelist)
edgeTable:
  .res .sizeof(edgetable)

